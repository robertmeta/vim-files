*dirvish.txt*	directory viewer

==============================================================================
OVERVIEW                                                             *dirvish*

Dirvish is a minimalist directory viewer. It basically dumps a list of paths
into a Vim buffer and provides some mappings to work with those paths. By
working with built-in Vim mechanisms instead of inventing peripheral
imitations, users (and other plugins) can compose and build upon known Vim
concepts.

Because each Dirvish buffer-name is the literal directory path, you can |:cd|
to the directory, >
  :cd %
create a new file, >
  :edit %/foo.txt
|expand()| the directory path, >
  :let &titlestring = expand('%', 1)
and use complementary plugin commands like |]f|/|[f| (unimpaired.vim).

Because each dirvish buffer is just a list of paths, you can use normal Vim
commands to |y|ank, |:read|, |gf|, etc. All of the built-in CTRL-W mappings
also work as expected.

It's totally fine to slice, dice, and smash any Dirvish buffer: it will never
modify the filesystem. Just press `R` to reload the default listing.

Re-use and composition of concepts multiplies the utility of those concepts;
if a plugin does _not_ reuse a concept, both that concept _and_ the new,
redundant mechanism are made mutually _less valuable_—the sum is less than the
parts—because the user now must learn or choose from two slightly different
things instead of one augmented system. @tpope's plugins demonstrate this
theme; more plugins should too.

==============================================================================
MAPPINGS                                                    *dirvish-mappings*

Global ~
    -               Opens the current file directory. Works with [count].
                    <Plug>(dirvish_up)

Buffer-local (filetype=dirvish) ~
    g?              Shows this help.
    R               Reloads the current directory.
    q               Quits; returns to the original file.
                    <Plug>(dirvish_quit)
    -               Opens the parent directory. Works with [count].
    <2-LeftMouse>
    i
    <CR>            Opens file at cursor.
    {Visual}I
    {Visual}<CR>    Opens selected files.
    o               Opens in horizontal split.
    {Visual}O       Opens selected files in horizontal splits.
    a               Opens in vertical split.
    {Visual}A       Opens selected files in vertical splits.
    p               Opens file in previous window.
    x               Pre-fills "|:Shdo|  {}" in the command-line.

Buffer-local (:Shdo) ~
    Z!              (experimental) Saves and executes the shell-script.

==============================================================================
COMMANDS                                                    *dirvish-commands*

:Dirvish                                                    *dirvish-:Dirvish*
    Opens the |current-directory|.

:Dirvish {path}
    Opens the directory at {path} (or its parent if {path} is a file).
    To open the directory of the current file: >
        :Dirvish %
<
:[range]Shdo {cmd} {}                                          *dirvish-:Shdo*
    Generates a shell script where {cmd} is applied to [range] with the
    respective filepath inserted wherever {} appears in the :Shdo command.
    For example, to rename a list of visual-selected files: >
        :'<,'>Shdo mv {} {}-copy.txt
<    Run the script with ":!%" (see |:!|) or "Z!".

==============================================================================
FUNCTIONS                                                  *dirvish-functions*

[range]dirvish#open({cmd}, {bg})
    Performs {cmd} ("edit", "vsplit", "split", "tabedit") on the files in
    [range]. {bg} must be 0 (open files in current window) or 1 (open files in
    the "background").

==============================================================================
OPTIONS                                                      *dirvish-options*

g:dirvish_relative_paths = 0                        *g:dirvish_relative_paths*

    1: Make paths in the Dirvish buffer relative to |getcwd()|.
       Note: Recommended on Vim 7.3 (because it lacks |conceal|).

The dirvish |FileType| event fires after Dirvish is initialized, so all
mappings, options, and content can be overridden by handling that event.
Example: >

    augroup my_dirvish_events
      autocmd!
      " Map t to "open in new tab".
      autocmd FileType dirvish
        \  nnoremap <buffer> t :call dirvish#open('tabedit', 0)<CR>
        \ |xnoremap <buffer> t :call dirvish#open('tabedit', 0)<CR>

      " Enable :Gstatus and friends.
      autocmd FileType dirvish call fugitive#detect(@%)

      " Map CTRL-R to reload the Dirvish buffer.
      autocmd FileType dirvish nnoremap <buffer> <C-R> :<C-U>Dirvish %<CR>

      " Map `gh` to hide dot-prefixed files.
      " To "toggle" this, just press `R` to reload.
      autocmd FileType dirvish nnoremap <buffer>
        \ gh :keeppatterns g@\v/\.[^\/]+/?$@d<cr>
    augroup END
<

==============================================================================
FAQ                                                              *dirvish-faq*

How do I control where Dirvish opens splits? ~
Set the Vim options 'splitbelow' and 'splitright'.

How do I "group" (sort) directories/folders at the top? ~
Sort folders at the top: >
    :sort r /[^\/]$/
<
Sort folders at the bottom: >
    :sort r /\/$/
<
How do I filter? ~
Use :g to delete lines matching any filter: >
    :g/foo/d
<
How do I hide "hidden" (dot-prefixed) files? ~
Use :g to delete the lines with dot-prefixed files: >
    :keeppatterns g@\v/\.[^\/]+/?$@d
<To "toggle", just reload. |dirvish-mappings|

To hide dotfiles by _default_, use this autocmd: >
    autocmd FileType dirvish keeppatterns g@\v/\.[^\/]+/?$@d
To un-hide, just undo |u|. To hide again, reload. |dirvish-mappings|

Why does the "swap file" dialog appear if another Vim is viewing the same ~
directory? ~
To avoid this, |:noswapfile| is required (Vim 7.4.213).
https://github.com/vim/vim/commit/v7-4-213

How can I delete files, rename files, or perform other commands?~
Since ":'<,'>call delete(getline('.'))" is a bit much to type, Dirvish
provides the ":Shdo" command. |dirvish-:Shdo|

Just for fun, here's the old-school way: >
    qqq
    :g/^/let @Q='echo '.shellescape(getline('.')).' '.shellescape(getline('.'))."\n"
    :exe 'e' tempname().'.sh'
    :put q|w|!%
<
Why does Dirvish report "invalid directory" for a path that contains unusual ~
characters (e.g. brackets "[]")? ~
Check your 'isfname' setting. On Windows (where filepaths may contain
backslashes "\") |fnamemodify()| may produce nonsense if 'isfname' does not
contain the aforementioned unusual characters.

==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
