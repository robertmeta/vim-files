*minisnip*  *minisnip.txt*  super lightweight snippet manager

Author:  Keyboard Fire <andy@keyboardfire.com>
License: MIT

                               _       _           _        ~
                     _ __ ___ (_)_ __ (_)___ _ __ (_)_ __   ~
                    | '_ ` _ \| | '_ \| / __| '_ \| | '_ \  ~
                    | | | | | | | | | | \__ \ | | | | |_) | ~
                    |_| |_| |_|_|_| |_|_|___/_| |_|_| .__/  ~
                                                    |_|     ~

1. Overview                    |minisnip-overview|
2. Mappings                    |minisnip-mappings|
3. Configuration               |minisnip-configuration|

===============================================================================
OVERVIEW                                                    *minisnip-overview*

Minisnip is a tiny plugin that allows you to quickly insert "templates" into
files. Among all the other snippet plugins out there, the primary goal of
minisnip is to be as minimal and lightweight as possible.

To get started with minisnip, create a directory called `~/.vim/minisnip`.
Then placing a file called `foo` inside of it will create the `foo` snippet,
which you can access by typing  foo<Tab>  in insert mode.

Filetype-aware snippets are also available. For example, a file called
`_java_main` will create a `main` snippet only when |filetype|=java, allowing
you to add ex. a `_c_main` snippet and so on.

===============================================================================
MAPPINGS                                                    *minisnip-mappings*

-------------------------------------------------------------------------------
                    *minisnip_<Tab>*
<Tab>               In insert mode, expand a mapping or jump to the next
                    placeholder and enter select mode.
                    In select mode, jump to the next placeholder.

===============================================================================
CONFIGURATION                                          *minisnip-configuration*

-------------------------------------------------------------------------------
                                                             *'g:minisnip_dir'*
Default: $HOME . '/.vim/minisnip'

This allows you to specify where minisnip looks for snippet files. Add this
line to your `.vimrc`: >
    let g:minisnip_dir = '/path/to/directory'
<

-------------------------------------------------------------------------------
                                                         *'g:minisnip_trigger'*
Default: '<Tab>'

Specifies which key expands snippets and jumps to the next placeholder. This
should be specified in the same format as you would use for a |:map|. For
example: >
    let g:minisnip_trigger = '<C-j>'
<

-------------------------------------------------------------------------------
                                                      *'g:minisnip_startdelim'*
                                                        *'g:minisnip_enddelim'*
Defaults: '{{+', '+}}'

The start and end delimeters of the placeholder string to use. For example,
with the default values, a sample snippet could look like this: >
    <!DOCTYPE html>
    <html lang='en'>
        <head>
            <title>{{+default title+}}</title>
        </head>
        <body>
            {{++}}
        </body>
    </html>
<

-------------------------------------------------------------------------------
                                                      *'g:minisnip_evalmarker'*
Default: '~'

Marks a template as meant to be executed as vimscript. With the default value,
this looks something like: >
    It has been {{+~localtime()+}} seconds since the Unix epoch
<

-------------------------------------------------------------------------------
                                                   *'g:minisnip_backrefmarker'*
Default: '\\~'

When this is present, followed by a single digit `n`, in a placeholder that
also starts with |'g:minisnip_evalmarker'|, it will be replaced with the `n`th
to last previous placeholder value, surrounded by quotes. Here is an example
of how it can be used: >
    #ifndef {{+INCLUDE_GUARD+}}
    #define {{+~\~1+}}

    {{++}}

    #endif
<
This will automatically fill the `#define` line with the value entered on the
`#ifndef` line upon jumping to it.
